#
# Copyright (c) 2008, 2009, 2010 Joseph Gaeddert
# Copyright (c) 2008, 2009, 2010 Virginia Polytechnic
#                                Institute & State University
#
# This file is part of liquid.
#
# liquid is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# liquid is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with liquid.  If not, see <http://www.gnu.org/licenses/>.
#

# 
# Makefile for liquid fixed-point math libraries
#

# paths
srcdir = 	@srcdir@
prefix = 	@prefix@
exec_prefix = 	@exec_prefix@
VPATH = 	@srcdir@
include_dirs	:= . include
vpath %.h $(include_dirs)

# programs
CC 	= @CC@
MV	:= mv -f
RM	:= rm -f
SED	:= sed
AR	:= ar
RANLIB	:= ranlib
AS	:= as

# flags
INCLUDE_CFLAGS	= $(addprefix -I ,$(include_dirs))
CONFIG_CFLAGS	= @ARCH_OPTION@ @FPM_OPTION@ @DEBUG_OPTION@
CFLAGS		+= $(INCLUDE_CFLAGS) -g -O2 -Wall -fPIC $(CONFIG_CFLAGS)
LDFLAGS		+= @LIBS@
ARFLAGS		= r
ASFLAGS		+= -g
#ASFLAGS		+= -arch ppc7400

qtype		= @QTYPE@
qtype_intbits	= @QTYPE_INTBITS@
qtype_fracbits	= @QTYPE_FRACBITS@

# Target collection
#
# Information about targets is collected in these variables
programs		:=
sources			:=
libraries		:=
extra_clean		:=

objects		= $(patsubst %.c,%.o,$(sources))

all:


sources  +=				\
	q32_dotprod.port.c		\
	q32_div.port.c			\
	q32_div.inv.newton.c		\
	libliquidfpm.c			\
	src/qfloat.c			\
	src/inv.newton.c		\
	src/kaiser.c			\
	src/clz.c			\
	src/log2.polyfit.c		\
	src/log2.shiftadd.c		\
	src/exp2.polyfit.c		\
	src/exp2.shiftadd.c		\
	src/sqrt.newton.c		\
	src/sincos.pwpolyfit.c		\
	src/sincos.cordic.c		\
	src/sinhcosh.cordic.c		\
	src/atan.pwpolyfit.c		\
	src/atan.cordic.c		\
	src/cq32.c			\
	src/msb_index.c			\
	src/math.transcendentals.c	\
	src/loglogbesseli0.pwpoly.c	\
	src/ratio.c

extra_clean		+=

#
# Dependencies
#

src/cq32.o : src/cq32.c src/complex_arithmetic.c src/complex_conversion.c src/complex_trig.c src/complex_log.c


#
# Auto-generated tables
#
gentabs := 				\
	math.transcendentals 		\
	logsin				\
	sincos.cordic			\
	sincos.pwpoly			\
	sinhcosh.cordic			\
	logexp.shiftadd			\
	logexp.polyfit

# Examples:
#   gentab_programs : gentab/gentab.math.transcendentals
#   gentab_sources  : gentab/gentab.math.transcendentals.c
#   gentab_targets  : gentab/math.transcendentals.qtype.c

gentab_programs	= $(patsubst %,gentab/gentab.%,$(gentabs))
gentab_sources	= $(patsubst %,%.c,$(gentab_programs))
gentab_targets	= $(patsubst %,gentab/%.$(qtype).c,$(gentabs))

sources  += $(gentab_targets)

# Build the gentab program.  This is done natively as the
# result is a program that generates a source file to be
# built for the target system.
gentab/gentab.% : gentab/gentab.%.c ./include/liquidfpm.h
	$(CC) $(INCLUDE_CFLAGS) -lm $< -o $@

# Run the natively-built program to generate the source
# file.  This file is to be built for the target system.
gentab/%.$(qtype).c : gentab/gentab.%
	./$< > $@

# Label the programs and targets as 'precious' so that
# make won't delete them after they have been created.
.PRECIOUS : $(gentab_programs)
.PRECIOUS : $(gentab_targets)

# Clean the intermediate gentab programs and targets
# marked as 'precious.'
clean-gentab :
	$(RM) $(gentab_programs)
	$(RM) $(gentab_targets)

# 
# Additional auto-generated sources
#

# qtype.s.gen
#
# Program to generate assembly code which defines
# the precision (intbits, fracbits) in the native
# target assembly language, and then includes the
# architecture-specific assembly routines for
# certain functions (e.g. q32_mul).
genlib/qtype.s.gen : genlib/qtype.s.gen.c
	$(CC) $(CFLAGS) $< -o $@

# TODO : summarize the assembly routines below

# PowerPC assembly
genlib/$(qtype).ppc.s : genlib/qtype.s.gen
	./$< -a ppc -n$(qtype) -i$(qtype_intbits) -f$(qtype_fracbits) -o $@

# x86 assembly
genlib/$(qtype).x86.s : genlib/qtype.s.gen
	./$< -a x86 -n$(qtype) -i$(qtype_intbits) -f$(qtype_fracbits) -o $@

# intelmac assembly
genlib/$(qtype).intelmac.s : genlib/qtype.s.gen
	./$< -a intelmac -n$(qtype) -i$(qtype_intbits) -f$(qtype_fracbits) -o $@


# 
# Dependencies
#
# Force objects to be dependent upon headers
$(objects) : ./include/liquidfpm.h ./include/liquidfpm.internal.h ./config.h

# add target-specific libraries
objects += @MLIBS@

# target-specific library definition:
#   libliquidfpm.dylib    (darwin)
#   libliquidfpm.so       (linux, et al.)
SHARED_LIB = @SH_LIB@

# rebind libraries:
#   ldconfig (linux, et al.)
#   No need to rebind on OS X/darwin systems
REBIND = @REBIND@

all: libliquidfpm.a $(SHARED_LIB)

install:
	@echo "installing..."
	mkdir -p @libdir@
	install -m 644 -p $(SHARED_LIB) libliquidfpm.a @libdir@
	$(REBIND)
	mkdir -p $(prefix)/include
	mkdir -p $(prefix)/include/liquid
	install -m 644 -p include/liquidfpm.h $(prefix)/include/liquid
	
# Library definition
libliquidfpm.a: $(objects)
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@

# darwin
libliquidfpm.dylib: $(objects)
	$(CC) -dynamiclib -install_name $@ -o $@ $^

# linux, et al
libliquidfpm.so: $(libraries)
	$(CC) -shared -Xlinker -soname=$@ -o $@ -Wl,-whole-archive $^ -Wl,-no-whole-archive -lc

#
# Tests
#
test: fpmtest
	./fpmtest

fpmtest.o: fpmtest.c include/liquidfpm.h

fpmtest: fpmtest.o libliquidfpm.a
	$(CC) $(CFLAGS) -lm $^ $(LDFLAGS) -o $@

#q32_mul.port.o: q32_mul.port.c

#q32_mul.ppc.o: q32_mul.ppc.s

#q32_mul.x86.o: q32_mul.x86.s

#q32_mul.intelmac.o: q32_mul.intelmac.s

# Benchmark
.PHONY: bench
benchmark_headers = 				\
	bench/q32_atan2_benchmark.h		\
	bench/q32_sin_benchmark.h		\
	bench/q32_sqrt_newton_benchmark.h	\
	bench/q32_log2_benchmark.h		\
	bench/q32_log2_shiftadd_benchmark.h

benchmarkgen_prog	= benchmarkgen
benchmark_prog		= benchmark
benchmark_include	= benchmark_include.h

BENCH_CFLAGS		= $(INCLUDE_CFLAGS)

$(benchmarkgen_prog): bench/benchmarkgen.c
	$(CC) -Wall -o $@ $<

$(benchmark_include): $(benchmarkgen_prog) $(benchmark_headers)
	./$(benchmarkgen_prog) $(benchmark_headers) > $@

$(benchmark_prog): bench/bench.c $(benchmark_include) libliquidfpm.a
	$(CC) $(BENCH_CFLAGS) -lm $< $(LDFLAGS) libliquidfpm.a -o $@

bench: $(benchmark_prog)
	./$<

clean-bench:
	$(RM) $(benchmarkgen_prog) $(benchmark_prog) $(benchmark_include)


# 
# autotest
#
.PHONY: autotest

# include autotest makefile which defines autotest_headers
include autotest/autotest.mk

autotestgen_prog	= autotestgen
autotest_prog		= xautotest
autotest_include	= autotest_include.h

AUTOTEST_CFLAGS		= $(INCLUDE_CFLAGS)

$(autotestgen_prog): autotest/autotestgen.c $(libraries) autotest/autotest.h
	$(CC) -Wall -o $@ $<

$(autotest_include): $(autotestgen_prog) $(autotest_headers)
	./$(autotestgen_prog) $(autotest_headers) > $@

$(autotest_prog): autotest/autotest.c $(autotest_include) libliquidfpm.a
	$(CC) $(AUTOTEST_CFLAGS) -lm $< $(LDFLAGS) libliquidfpm.a -o $@

check: $(autotest_prog)
	./$<

clean-autotest:
	$(RM) $(autotestgen_prog) $(autotest_prog) $(autotest_include)

#
# clean
#
clean: clean-bench clean-autotest clean-gentab
	$(RM) $(objects)
	$(RM) $(dependencies)
	$(RM) $(SHARED_LIB)
	$(RM) libliquidfpm.a
	$(RM) fpmtest fpmtest.o
	$(RM) $(extra_clean)

distclean: clean
	$(RM) config.log config.cache config.status config.h makefile
	$(RM) autom4te.cache

