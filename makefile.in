# 
# Makefile for liquid fixed-point math libraries
#

# paths
srcdir = 	@srcdir@
prefix = 	@prefix@
exec_prefix = 	@exec_prefix@
VPATH = 	@srcdir@
include_dirs	:= . include
vpath %.h $(include_dirs)

# programs
CC 	= @CC@
MV	:= mv -f
RM	:= rm -f
SED	:= sed
AR	:= ar
RANLIB	:= ranlib

# flags
INCLUDE_CFLAGS	= $(addprefix -I ,$(include_dirs))
CONFIG_CFLAGS	= @ARCH_OPTION@
CFLAGS		+= $(INCLUDE_CFLAGS) -g -O2 -Wall -I. @ARCH_OPTION@ @FPM_OPTION@ @DEBUG_OPTION@
LDFLAGS		+= @LIBS@
ARFLAGS		= r

LIBS = clz.o msb_index.o trig.o libmad_fixed.o \
	sin_table_q32_256.o \
	log2_fraction_table_32.o \
	log2_fraction_table_256.o \
	atan_table_q32_32_8.o

GENTABS = gentab_sincos gentab_atan2

INCLUDE_HEADERS = \
	src/fpm.h

AUTOTESTS = 

BENCHMARKS = 

BENCH_FLAGS = -g -Wall -pthread @ARCH_OPTION@ @FPM_OPTION@ @DEBUG_OPTION@
AUTOTEST_FLAGS = $(CFLAGS)

SHARED_LIB = @SH_LIB@

all: libliquidfpm.a $(SHARED_LIB)

install:
	@echo "installing..."
	mkdir -p @libdir@
	install -m 644 -p $(SHARED_LIB) libliquidfpm.a @libdir@
	@REBIND@
	mkdir -p @includedir@
	mkdir -p @includedir@/liquid
	install -m 644 -p include/liquidfpm.h @includedir@/liquid
	install -m 644 -p $(INCLUDE_HEADERS) @includedir@/liquid
	
libliquidfpm.a: $(LIBS)
	ar r $@ $^
	ranlib libliquidfpm.a

# darwin
libliquidfpm.dylib: $(LIBS)
	$(CC) -dynamiclib -install_name $@ -o $@ $^

# linux, et al
libliquidfpm.so: $(LIBS)
	$(CC) -shared -Xlinker -soname=$@ -o $@ -Wl,-whole-archive $^ -Wl,-no-whole-archive @CLIB@

# 
# LIBRARIES
#

# generate tables
$(GENTABS) : % : src/%.c
	$(CC) $(CFLAGS) -c $< -o $@
	./$< > src/$<.lut.c

# library objects
$(LIBS) : %.o : src/%.c
	$(CC) $(CFLAGS) -c $< -o $@

#
# Autotests
#
autotest_include.h: $(AUTOTESTS)
	python autotest/autotest_gen.py $(AUTOTESTS)

xautotest: autotest_include.h autotest/autotest.c $(LIBS)
	$(CC) $(AUTOTEST_FLAGS) $(LIBS) $(LDFLAGS) autotest/autotest.c -o xautotest

check: xautotest
	./xautotest -v

check-clean:
	rm -f autotest_include.h xautotest

# 
# Benchmarks
#
benchmark_include.h: $(BENCHMARKS) bench/benchmarkgen.py
	python bench/benchmarkgen.py $(BENCHMARKS)

# ignore optimization flags
benchmark: benchmark_include.h bench/bench.c $(LIBS)
	$(CC) $(BENCH_FLAGS) $(LIBS) $(LDFLAGS) bench/bench.c -o benchmark

bench: benchmark
	./benchmark

bench-clean:
	rm -f benchmark_include.h benchmark

#
# Examples
#

clean: check-clean bench-clean
	rm -f *.o $(SHARED_LIB) *.a

distclean: clean
	rm -f config.log config.cache config.status config.h makefile
	rm -rf autom4te.cache

